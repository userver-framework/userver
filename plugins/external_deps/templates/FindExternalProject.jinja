# AUTOGENERATED, DON'T CHANGE THIS FILE!

include(ExternalProject)

{% if use_destdir %}
set(DESTDIR "${CMAKE_CURRENT_BINARY_DIR}/lib/{{ name }}_install")
{% endif %} {# if use_destdir #}

if(NOT TARGET {{ name }}_external_project)
  if (CMAKE_BUILD_TYPE MATCHES "Test")
    set(CURRENT_CMAKE_BUILD_TYPE "Debug")
  else ()
    set(CURRENT_CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE})
  endif ()

{% if source.get('repository') %}
  message(STATUS "{{ name }} will be downloaded at build stage if required")
{% endif %}

  ExternalProject_Add(
    {{ name }}_external_project
{% if source.get('repository') %}
    GIT_REPOSITORY {{ source.repository }}
    {% if source.tag -%}
        GIT_TAG {{ source.tag }}
    {% endif -%}
    TIMEOUT 10
{% elif source.dir%}
    SOURCE_DIR {{ source.dir }}
    DOWNLOAD_COMMAND ""
{% else %}
    DOWNLOAD_COMMAND "{{ commands.download|default('') }}"
{% endif %}
{% if depends %}
    DEPENDS {{ depends|join(' ') }}
{% endif %}
    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
    CMAKE_ARGS
      -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
      -DCMAKE_C_COMPILER_LAUNCHER=${CMAKE_C_COMPILER_LAUNCHER}
      -DCMAKE_CXX_COMPILER_LAUNCHER=${CMAKE_CXX_COMPILER_LAUNCHER}
      -DCMAKE_BUILD_TYPE=${CURRENT_CMAKE_BUILD_TYPE}
{% for arg in build_args.names %}
      -D{{ arg }}
{% endfor %}
{% if commands and commands.get('list_separator', []) %}
    LIST_SEPARATOR "{{ commands.list_separator }}"
{% endif %}
    PATCH_COMMAND "{{ commands.patch|default('') }}"
    INSTALL_COMMAND {{ commands.install|default('""') }}
    {# `update` is function of python dict -#}
    UPDATE_COMMAND "{{ commands.update if 'update' in commands else '' }}"
    LOG_DOWNLOAD {{ log.download|default(true) }}
    LOG_CONFIGURE {{ log.configure|default(true) }}
    LOG_BUILD {{ log.build|default(true) }}
  )

ExternalProject_Get_Property({{ name }}_external_project source_dir binary_dir)

{% if use_destdir %}
set({{ name }}_INCLUDE_DIRS ${DESTDIR}/usr/local/include)
list(APPEND CMAKE_PREFIX_PATH "${DESTDIR}/usr/local")
{% else %}
set({{ name }}_INCLUDE_DIRS ${source_dir}/include)
{% endif %} {# if use_destdir #}

file(MAKE_DIRECTORY {{ '${' }}{{ name }}_INCLUDE_DIRS{{ '}'}})

{% if targets %}
{% for target in targets %}
add_library({{ target.name }} INTERFACE IMPORTED GLOBAL)
add_dependencies({{ target.name }}
  {{ name }}_external_project
{% if target.get('depends') %}
  {{ target.depends|join(' ') }}
{% endif %} {# if target.depends #}
)
{% if compile_definitions and compile_definitions.names %}
target_compile_definitions(
  {{ target.name }}
    INTERFACE
{% for option in compile_definitions.names %}
      {{ option }}
{% endfor %} {# for option in compile_definitions #}
)
{% endif %} {# if compile_definitions #}

{% if target.get('libs') %}
target_link_libraries(
  {{ target.name }}
    INTERFACE
{% for lib in target.libs %}
      "${binary_dir}/{{ lib }}"
{% endfor %} {# for lib in target.libs #}
)
{% endif %} {# if target.libs #}

target_include_directories(
  {{ target.name }}
    INTERFACE
      {{ '${' }}{{ name }}_INCLUDE_DIRS{{ '}'}}
{% for include in target.get('includes', []) %}
      ${source_dir}/{{ include }}
{% endfor %}
)

{% endfor %} {# for target in targets #}
{% endif %} {# if targets #}

set({{ name }}_FOUND ON)
set(External{{ name }}_FOUND ON)
set({{ name }}_external_project_FOUND ON)

endif(NOT TARGET {{ name }}_external_project)
