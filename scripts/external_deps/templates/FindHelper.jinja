# AUTOGENERATED, DON'T CHANGE THIS FILE!
#
# Generated via userver/scripts/external_deps from userver/external-deps/{{ common_name or name }}.yaml
{% set libraries_variable = libraries.variable|default('%s_LIBRARIES'|format(name)) %}
{% set includes_variable = includes.variable|default('%s_INCLUDE_DIRS'|format(name)) %}
{% set programs_variable = programs.variable|default('%s_EXECUTABLE'|format(name)) %}
{% set programs_enabled = programs and programs.enabled|default(true) %}
{% set current_package_name = package_name or name %}

{% if version %}
if (NOT {{ name }}_FIND_VERSION OR {{ name }}_FIND_VERSION VERSION_LESS {{ version }})
    set({{ name }}_FIND_VERSION {{ version }})
endif()
{% endif %}

if (NOT USERVER_CHECK_PACKAGE_VERSIONS)
  unset({{ name }}_FIND_VERSION)
endif()

if (TARGET {{ name }})
  if (NOT {{ name }}_FIND_VERSION)
      set({{ name }}_FOUND ON)
      return()
  endif()

  if ({{ name }}_VERSION)
      if ({{ name }}_FIND_VERSION VERSION_LESS_EQUAL {{ name }}_VERSION)
          set({{ name }}_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version {{ '${' }}{{ name }}_VERSION{{ '}' }} "
              "of {{ name }} when version {{ '${' }}{{ name }}_FIND_VERSION{{ '}' }} "
              "was requested."
          )
      endif()
  endif()
endif()

{% for var_name, var_value in extra_cmake_vars.items() %}
set({{var_name}} {{var_value}})
{% endfor %}

{%- set full_error_message = '' -%}
{%- if fail_message -%}
  {%- set full_error_message = fail_message|trim -%}
{%- else -%}
  {%- set full_error_message = "Could not find `{}` package.".format(name) -%}
  {%- if debian_names -%}
    {%- set full_error_message = full_error_message + "\\n\\tDebian: sudo apt update && sudo apt install " + ' '.join(debian_names) -%}
  {%- endif -%}
  {%- if formula_name -%}
    {%- set full_error_message = full_error_message + "\\n\\tMacOS: brew install {}".format(formula_name) -%}
  {%- endif -%}
  {%- if rpm_names -%}
    {%- set full_error_message = full_error_message + "\\n\\tFedora: sudo dnf install " + ' '.join(rpm_names) -%}
  {%- endif -%}
  {%- if pacman_names -%}
    {%- set full_error_message = full_error_message + "\\n\\tArchLinux: sudo pacman -S " + ' '.join(pacman_names) -%}
  {%- endif -%}
  {%- if pkg_names -%}
    {%- set full_error_message = full_error_message + "\\n\\tFreeBSD: pkg install " + ' '.join(pkg_names) -%}
  {%- endif -%}
{%- endif -%}

set(FULL_ERROR_MESSAGE "{{ full_error_message }}\\n")

{% macro cmake_find_impl(type, variable, value) %}
{%- set mangled_name = variable + '_' + value.names|join('_')|replace('/', '_')|replace('.', '_') -%}

find_{{ type }}({{ mangled_name }}
  NAMES {{ value.names|join(' ') }}
{% if value.get('path-suffixes') %}
  PATH_SUFFIXES {{ value['path-suffixes']|join(' ') }}
{% endif %}
{% if value.get('paths') %}
  PATHS {{ value['paths']|join(' ') }}
{% endif %}
)
list(APPEND {{ variable }} {{ '${' }}{{ mangled_name }}{{ '}'}})
{% endmacro %}

{%- macro cmake_find(type, variable, values) %}
  {%- if values.find|default(false) -%}
    {%- for value in values.find -%}
      {{ cmake_find_impl(type, variable, value) }}
    {%- endfor -%}
  {%- endif %}
{% endmacro %}

{%- for check in checks %}
if ({{ check.expression }})
  message(FATAL_ERROR "{{ check.error }}")
endif()
{% endfor -%}

{%- if not virtual %}

include(FindPackageHandleStandardArgs)

{{ cmake_find('library', libraries_variable, libraries) }}
{{ cmake_find('path', includes_variable, includes) }}
{{ cmake_find('program', programs_variable, programs) }}

if ({{ name }}_VERSION)
  set({{ current_package_name }}_VERSION {{ '${' }}{{ name }}_VERSION{{ '}' }})
endif()

{# If it is possible detect the version as the dependent CMake files may rely on it #}
{% if debian_names or rpm_names or pacman_names or pkg_config_names or formula_name or pkg_names -%}
if (NOT {{ current_package_name }}_VERSION)
  include(DetectVersion)

  {% if debian_names or rpm_names or pacman_names or pkg_config_names or pkg_names -%}
  if (UNIX AND NOT APPLE)
    {% if debian_names -%}
    deb_version({{ current_package_name }}_VERSION {{ debian_names[0] }})
    {%- endif %}

    {% if rpm_names -%}
    rpm_version({{ current_package_name }}_VERSION {{ rpm_names[0] }})
    {%- endif %}

    {% if pacman_names -%}
    pacman_version({{ current_package_name }}_VERSION {{ pacman_names[0] }})
    {%- endif %}

    {% if pkg_names -%}
    pkg_version({{ current_package_name }}_VERSION {{ pkg_names[0] }})
    {%- endif %}

  endif()
  {%- endif %}

  {% if formula_name -%}
  if (APPLE)
    brew_version({{ current_package_name }}_VERSION {{ formula_name }})
  endif()
  {%- endif %}

  {% if pkg_config_names -%}
  pkg_config_version({{ current_package_name }}_VERSION {{ pkg_config_names[0] }})
  {%- endif %}

endif()
{% endif %}

{% if not libraries.find|default(false) and not includes.find|default(false) and not programs.find|default(false) %}
find_package({{ common_name or current_package_name }} {{ version or '' }}
{% if common_name %}
    COMPONENTS {{ name }}
{% endif %} {# if common_name #}
)
set({{ name }}_FOUND {{ '${' }}{{ common_name or current_package_name }}_FOUND{{ '}'}})
{% endif %} {# if not libraries.find.names|default(false) and not includes.names|default(false) #}

{% if libraries.find|default(false) or includes.find|default(false) or programs.find|default(false) %}
find_package_handle_standard_args(
  {{ current_package_name }}
    REQUIRED_VARS
      {{ libraries_variable if libraries.enabled|default(true) else '' }}
      {{ includes_variable if includes.enabled|default(true) else '' }}
      {{ programs_variable if programs_enabled else '' }}
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  {{ libraries_variable if libraries.enabled|default(true) else '' }}
  {{ includes_variable if includes.enabled|default(true) else '' }}
  {{ programs_variable if programs_enabled else '' }}
)
{% endif %}

if (NOT {{ name }}_FOUND)
  if ({{ name }}_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least {{ '${' }}{{ name }}_FIND_VERSION{{ '}' }}")
  endif()

  return()
endif()

if ({{ name }}_FIND_VERSION)
  if ({{ current_package_name }}_VERSION VERSION_LESS {{ name }}_FIND_VERSION)
      message(STATUS
          "Version of {{ name }} is '{{ '${' }}{{ current_package_name }}_VERSION{{ '}'}}'. "
          "Required version is at least '{{ '${' }}{{ name }}_FIND_VERSION{{ '}'}}'. "
          "Ignoring found {{ name }}. "
          "Note: Set -DUSERVER_CHECK_PACKAGE_VERSIONS=0 to skip package version checks if the package is fine."
      )
      set({{ name }}_FOUND OFF)
      return()
  endif()
endif()

{% endif %} {# if not virtual #}

{% if common_name or libraries.enabled|default(true) or includes.enabled|default(true) or virtual  %}
if (NOT TARGET {{ name }})
  add_library({{ name }} INTERFACE IMPORTED GLOBAL)

  {% if common_name -%}
  if (TARGET {{ '{}::{}'.format(common_name, name) }})
    target_link_libraries({{ name }} INTERFACE {{ '{}::{}'.format(common_name, name) }})
  endif()
  {% endif -%}

  {% if includes.enabled|default(true) -%}
  target_include_directories({{ name }} INTERFACE {{ '${' }}{{ includes_variable }}{{ '}' }})
  message(STATUS "{{ name }} include directories: {{ '${' }}{{ includes_variable }}{{ '}' }}")
  {% endif -%}

  {% if libraries.enabled|default(true) -%}
  target_link_libraries({{ name }} INTERFACE {{ '${' }}{{ libraries_variable }}{{ '}' }})
  message(STATUS "{{ name }} libraries: {{ '${' }}{{ libraries_variable }}{{ '}' }}")
  {% endif -%}

  {% if compile_definitions and compile_definitions.names -%}
  target_compile_definitions({{ name }} INTERFACE
    {%- for option in compile_definitions.names %}
    {{ option }}
    {% endfor %}
  )
  {%- endif %}

  # Target {{ name }} is created
endif()

if ({{ current_package_name }}_VERSION)
  set({{ name }}_VERSION "{{ '${' }}{{ current_package_name }}_VERSION{{ '}' }}" CACHE STRING "Version of the {{ name }}")
endif()
{% endif %}
