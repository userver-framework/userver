name: CI

'on':
    pull_request:
    push:
        branches:
          - master
          - develop
          - feature/**

env:
    UBSAN_OPTIONS: print_stacktrace=1

jobs:
    posix:
        strategy:
            fail-fast: false
            matrix:
                include:
                  - cmake-flags: >-
                        -DCMAKE_CXX_COMPILER=clang++-14 -DCMAKE_C_COMPILER=clang-14
                        -DUSERVER_SANITIZE="ub"
                        -DCMAKE_BUILD_TYPE=Debug
                    os: ubuntu-22.04
                    info: clang-14 + debug + sanitize ub
                    tests-flags: '--gtest_filter=-Subprocess.CheckSpdlogClosesFds'

                  - cmake-flags: >-
                        -DUSERVER_FEATURE_CRYPTOPP_BLAKE2=0 -DUSERVER_FEATURE_REDIS_HI_MALLOC=1
                        -DUSERVER_NO_WERROR=1 -DUSERVER_SANITIZE="ub addr" -DCMAKE_BUILD_TYPE=Debug
                    os: ubuntu-20.04
                    info: g++-9 + debug + sanitize addr+ub
                    tests-flags: '--gtest_filter=-HttpClient.Cancel*:HttpClient.Retr*:HttpClient.RedirectHeaders'

                  - cmake-flags: >-
                        -DUSERVER_FEATURE_CRYPTOPP_BLAKE2=0 -DUSERVER_FEATURE_REDIS_HI_MALLOC=1
                        -DUSERVER_NO_WERROR=1 -DCMAKE_BUILD_TYPE=Release
                    os: ubuntu-20.04
                    info: g++-9 + release
                    tests-flags: '--gtest_filter=-HttpClient.RedirectHeaders'

                  - cmake-flags: >-
                        -DCMAKE_CXX_COMPILER=g++-8 -DCMAKE_C_COMPILER=gcc-8
                        -DUSERVER_FEATURE_MONGODB=0
                        -DUSERVER_FEATURE_POSTGRESQL=0
                        -DUSERVER_FEATURE_GRPC=0
                        -DUSERVER_FEATURE_CRYPTOPP_BLAKE2=0
                        -DUSERVER_USE_LD=gold -DCMAKE_BUILD_TYPE=Release
                    os: ubuntu-18.04
                    info: g++-8 + release
                    tests-flags: '--gtest_filter=-FormatsYaml.NativeLocation:FormatsYaml.NullAsDefaulted'

        name: '${{matrix.os}}: ${{matrix.info}}'
        runs-on: ${{matrix.os}}

        steps:
          - uses: actions/checkout@v2

          - name: Reuse ccache directory
            uses: actions/cache@v2
            with:
                path: ~/.ccache
                key: '${{matrix.os}} ${{matrix.info}} ccache-dir ${{github.ref}} run-${{github.run_number}}'
                restore-keys: |
                    ${{matrix.os}} ${{matrix.info}} ccache-dir ${{github.ref}} run-'
                    ${{matrix.os}} ${{matrix.info}} ccache-

          - name: Install packages
            run: |
                sudo apt update
                sudo apt install --allow-downgrades -y $(cat scripts/docs/en/deps/${{matrix.os}}.md | tr '\n' ' ')

          - name: Setup ccache
            run: |
                ccache -M 2.0GB
                ccache -s

          - name: Run cmake
            run: |
                mkdir build_debug
                cd build_debug
                cmake ${{matrix.cmake-flags}} ..

          - name: Compile
            run: |
                pwd
                cd build_debug
                make -j$(nproc)

          - name: Run tests (universal)
            run: |
                cd build_debug
                ./userver/universal/userver-universal_unittest ${{matrix.tests-flags}}

          - name: Run tests (core)
            run: |
                cd build_debug
                ./userver/core/userver-core_unittest ${{matrix.tests-flags}}

          - name: Run tests (postgresql)
            run: |
                cd build_debug
                mkdir userver/postgresql || :
                cd userver/postgresql
                ctest -V

          - name: Run tests (redis)
            run: |
                cd build_debug/userver/redis/
                ctest -V

          - name: Run tests (mongo)
            # libbson unnecessarily overaligns structures and GCC-9 does not support overaligned new
            if: ${{matrix.info}} != "g++-9 + debug + sanitize addr+ub"
            run: |
                cd build_debug
                mkdir userver/mongo || :
                cd userver/mongo
                if [ -f ./userver-mongo_unittest ]; then ./userver-mongo_unittest ; fi
                # Mongo is not available on Ubuntu 22.04 from default repos
                if [ "${{matrix.os}}" != "ubuntu-22.04" ]; then ctest -V -R userver-mongo_mongotest ; fi

          - name: Run tests (gRPC)
            run: |
                cd build_debug
                mkdir userver/grpc || :
                cd userver/grpc
                ctest -V
