# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (PostgreSQL_FOUND)
  return()
endif()

if (TARGET PostgreSQL)
  set(PostgreSQL_FOUND ON)
  return()
endif()

if (NOT PostgreSQL_FIND_VERSION OR PostgreSQL_FIND_VERSION VERSION_LESS 10)
    set(PostgreSQL_FIND_VERSION 10)
endif()

set(PostgreSQL_ADDITIONAL_VERSIONS "10" "12" "13" "14")
set(FULL_ERROR_MESSAGE "Could not find `PostgreSQL` package.\n\tDebian: sudo apt update && sudo apt install libpq-dev postgresql-server-dev-12\n\tMacOS: brew install postgres")
if (PostgreSQL_FIND_VERSION)
    set(FULL_ERROR_MESSAGE "${FULL_ERROR_MESSAGE}\nRequired version is at least ${PostgreSQL_FIND_VERSION}")
endif()


include(FindPackageHandleStandardArgs)





if (PostgreSQL_FIND_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libpq-dev
      OUTPUT_VARIABLE PostgreSQL_version_output
      ERROR_VARIABLE PostgreSQL_version_error
      RESULT_VARIABLE PostgreSQL_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (PostgreSQL_version_result EQUAL 0)
      set(PostgreSQL_VERSION ${PostgreSQL_version_output})
      message(STATUS "Installed version libpq-dev: ${PostgreSQL_VERSION}")
    endif(PostgreSQL_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions postgres
      OUTPUT_VARIABLE PostgreSQL_version_output
      ERROR_VARIABLE PostgreSQL_version_error
      RESULT_VARIABLE PostgreSQL_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (PostgreSQL_version_result EQUAL 0)
      if (PostgreSQL_version_output MATCHES "^(.*) (.*)$")
        set(PostgreSQL_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version postgres: ${PostgreSQL_VERSION}")
      else()
        set(PostgreSQL_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${PostgreSQL_version_error}")
    endif()
  endif()
endif()
 
endif (PostgreSQL_FIND_VERSION)

find_package(PostgreSQL 10
 )
set(PostgreSQL_FOUND ${PostgreSQL_FOUND})
 


if (PostgreSQL_FIND_VERSION)
  if (PostgreSQL_VERSION VERSION_LESS PostgreSQL_FIND_VERSION)
      message(STATUS
          "Version of PostgreSQL is ${PostgreSQL_VERSION}. "
          "Required version is ${PostgreSQL_FIND_VERSION}. Ignoring found PostgreSQL."
      )
      set(PostgreSQL_FOUND OFF)
  endif()
endif()

if (NOT PostgreSQL_FOUND)
  if (PostgreSQL_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}")
  endif()

  return()
endif()

 
if (NOT TARGET PostgreSQL)
  add_library(PostgreSQL INTERFACE IMPORTED GLOBAL)

  target_include_directories(PostgreSQL INTERFACE ${PostgreSQL_INCLUDE_DIRS})
  target_link_libraries(PostgreSQL INTERFACE ${PostgreSQL_LIBRARIES})
  
  # Target PostgreSQL is created
endif()
