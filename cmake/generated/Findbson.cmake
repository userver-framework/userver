# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (NOT bson_FIND_VERSION OR bson_FIND_VERSION VERSION_LESS 1.16.0)
    set(bson_FIND_VERSION 1.16.0)
endif()

if (NOT USERVER_CHECK_PACKAGE_VERSIONS)
  unset(bson_FIND_VERSION)
endif()

if (TARGET bson)
  if (NOT bson_FIND_VERSION)
      set(bson_FOUND ON)
      return()
  endif()

  if (bson_VERSION)
      if (bson_FIND_VERSION VERSION_LESS_EQUAL bson_VERSION)
          set(bson_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version ${bson_VERSION} "
              "of bson when version ${bson_FIND_VERSION} "
              "was requested."
          )
      endif()
  endif()
endif()

set(FULL_ERROR_MESSAGE "Could not find `bson` package.\n\tDebian: sudo apt update && sudo apt install libmongoc-dev\n\tMacOS: brew install mongo-c-driver\n\tFedora: sudo dnf install mongo-c-driver-devel")


include(FindPackageHandleStandardArgs)

find_library(bson_LIBRARIES_bson_bson-1_0
  NAMES bson bson-1.0
)
list(APPEND bson_LIBRARIES ${bson_LIBRARIES_bson_bson-1_0})

find_path(bson_INCLUDE_DIRS_bson_h
  NAMES bson.h
  PATHS /usr/include/bson /usr/include/libbson-1.0
)
list(APPEND bson_INCLUDE_DIRS ${bson_INCLUDE_DIRS_bson_h})



if (bson_VERSION)
  set(bson_VERSION ${bson_VERSION})
endif()

if (bson_FIND_VERSION AND NOT bson_VERSION)
  include(DetectVersion)

  if (UNIX AND NOT APPLE)
    deb_version(bson_VERSION libmongoc-dev)
    rpm_version(bson_VERSION mongo-c-driver-devel)
  endif()
  if (APPLE)
    brew_version(bson_VERSION mongo-c-driver)
  endif()
endif()

 
find_package_handle_standard_args(
  bson
    REQUIRED_VARS
      bson_LIBRARIES
      bson_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  bson_LIBRARIES
  bson_INCLUDE_DIRS
  
)

if (NOT bson_FOUND)
  if (bson_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least ${bson_FIND_VERSION}")
  endif()

  return()
endif()

if (bson_FIND_VERSION)
  if (bson_VERSION VERSION_LESS bson_FIND_VERSION)
      message(STATUS
          "Version of bson is '${bson_VERSION}'. "
          "Required version is at least '${bson_FIND_VERSION}'. "
          "Ignoring found bson."
          "Note: Set -DUSERVER_CHECK_PACKAGE_VERSIONS=0 to skip package version checks if the package is fine."
      )
      set(bson_FOUND OFF)
      return()
  endif()
endif()

 
if (NOT TARGET bson)
  add_library(bson INTERFACE IMPORTED GLOBAL)

  target_include_directories(bson INTERFACE ${bson_INCLUDE_DIRS})
  target_link_libraries(bson INTERFACE ${bson_LIBRARIES})
  
  # Target bson is created
endif()

if (bson_VERSION)
  set(bson_VERSION "${bson_VERSION}" CACHE STRING "Version of the bson")
endif()
