# AUTOGENERATED, DON'T CHANGE THIS FILE!


if (TARGET UserverGTest)
  if (NOT UserverGTest_FIND_VERSION)
      set(UserverGTest_FOUND ON)
      return()
  endif()

  if (UserverGTest_VERSION)
      if (UserverGTest_FIND_VERSION VERSION_LESS_EQUAL UserverGTest_VERSION)
          set(UserverGTest_FOUND ON)
          return()
      else()
          message(FATAL_ERROR
              "Already using version ${UserverGTest_VERSION} "
              "of UserverGTest when version ${UserverGTest_FIND_VERSION} "
              "was requested."
          )
      endif()
  endif()
endif()

set(FULL_ERROR_MESSAGE "Could not find `UserverGTest` package.\n\tDebian: sudo apt update && sudo apt install libgtest-dev\n\tMacOS: brew install libgtest-dev")


include(FindPackageHandleStandardArgs)

find_library(UserverGTest_LIBRARIES_gtest_main
  NAMES gtest_main
)
list(APPEND UserverGTest_LIBRARIES ${UserverGTest_LIBRARIES_gtest_main})

find_path(UserverGTest_INCLUDE_DIRS_gtest_gtest_h
  NAMES gtest/gtest.h
)
list(APPEND UserverGTest_INCLUDE_DIRS ${UserverGTest_INCLUDE_DIRS_gtest_gtest_h})



if (UserverGTest_VERSION)
  set(UserverGTest_VERSION ${UserverGTest_VERSION})
endif()

if (UserverGTest_FIND_VERSION AND NOT UserverGTest_VERSION)
if (UNIX AND NOT APPLE)
  find_program(DPKG_QUERY_BIN dpkg-query)
  if (DPKG_QUERY_BIN)
    execute_process(
      COMMAND dpkg-query --showformat=\${Version} --show libgtest-dev
      OUTPUT_VARIABLE UserverGTest_version_output
      ERROR_VARIABLE UserverGTest_version_error
      RESULT_VARIABLE UserverGTest_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (UserverGTest_version_result EQUAL 0)
      set(UserverGTest_VERSION ${UserverGTest_version_output})
      message(STATUS "Installed version libgtest-dev: ${UserverGTest_VERSION}")
    endif(UserverGTest_version_result EQUAL 0)
  endif(DPKG_QUERY_BIN)
endif(UNIX AND NOT APPLE)
 
if (APPLE)
  find_program(BREW_BIN brew)
  if (BREW_BIN)
    execute_process(
      COMMAND brew list --versions libgtest-dev
      OUTPUT_VARIABLE UserverGTest_version_output
      ERROR_VARIABLE UserverGTest_version_error
      RESULT_VARIABLE UserverGTest_version_result
      OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if (UserverGTest_version_result EQUAL 0)
      if (UserverGTest_version_output MATCHES "^(.*) (.*)$")
        set(UserverGTest_VERSION ${CMAKE_MATCH_2})
        message(STATUS "Installed version libgtest-dev: ${UserverGTest_VERSION}")
      else()
        set(UserverGTest_VERSION "NOT_FOUND")
      endif()
    else()
      message(WARNING "Failed execute brew: ${UserverGTest_version_error}")
    endif()
  endif()
endif()
 
endif (UserverGTest_FIND_VERSION AND NOT UserverGTest_VERSION)

 
find_package_handle_standard_args(
  UserverGTest
    REQUIRED_VARS
      UserverGTest_LIBRARIES
      UserverGTest_INCLUDE_DIRS
      
    FAIL_MESSAGE
      "${FULL_ERROR_MESSAGE}"
)
mark_as_advanced(
  UserverGTest_LIBRARIES
  UserverGTest_INCLUDE_DIRS
  
)

if (NOT UserverGTest_FOUND)
  if (UserverGTest_FIND_REQUIRED)
      message(FATAL_ERROR "${FULL_ERROR_MESSAGE}. Required version is at least ${UserverGTest_FIND_VERSION}")
  endif()

  return()
endif()

if (UserverGTest_FIND_VERSION)
  if (UserverGTest_VERSION VERSION_LESS UserverGTest_FIND_VERSION)
      message(STATUS
          "Version of UserverGTest is '${UserverGTest_VERSION}'. "
          "Required version is at least '${UserverGTest_FIND_VERSION}'. "
          "Ignoring found UserverGTest."
      )
      set(UserverGTest_FOUND OFF)
      return()
  endif()
endif()

 
if (NOT TARGET UserverGTest)
  add_library(UserverGTest INTERFACE IMPORTED GLOBAL)

  target_include_directories(UserverGTest INTERFACE ${UserverGTest_INCLUDE_DIRS})
  target_link_libraries(UserverGTest INTERFACE ${UserverGTest_LIBRARIES})
  
  # Target UserverGTest is created
endif()

if (UserverGTest_VERSION)
  set(UserverGTest_VERSION "${UserverGTest_VERSION}" CACHE STRING "Version of the UserverGTest")
endif()
